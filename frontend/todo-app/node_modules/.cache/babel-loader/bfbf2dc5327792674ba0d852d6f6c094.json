{"ast":null,"code":"import axios from 'axios'; // Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(\"http://localhost:8080/basicauth\", {\n      headers: {\n        authorization: basicAuthHeader\n      }\n    });\n  }\n\n  // register successful login and store in session storage\n  registerSuccessfulLogin(username, password) {\n    // use username and password from 4200 as 8080 authentication\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  } // handle log out\n\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  } // check if user is logged in\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  } // retrieve current user's username\n\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  } // intercept HTTP requests and include basicAuthHeader\n\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","basicAuthHeader","registerSuccessfulLogin","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EAA6C;AAACC,MAAAA,OAAO,EAAG;AAACC,QAAAA,aAAa,EAAGC;AAAjB;AAAX,KAA7C,CAAP;AACH;;AAID;AACAC,EAAAA,uBAAuB,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAExC;AACA,QAAII,eAAe,GAAG,WAAWE,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AACAQ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CV,QAA5C;AACA,SAAKW,sBAAL,CAA4BN,eAA5B;AACH,GAfuB,CAiBxB;;;AACAO,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH,GApBuB,CAsBxB;;;AACAC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH,GA3BuB,CA6BxB;;;AACAE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH,GAlCuB,CAoCxB;;;AACAJ,EAAAA,sBAAsB,CAACN,eAAD,EAAkB;AACpCR,IAAAA,KAAK,CAACqB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACvBO,QAAAA,MAAM,CAAClB,OAAP,CAAeC,aAAf,GAA+BC,eAA/B;AACH;;AACD,aAAOgB,MAAP;AACH,KANL;AAQH;;AA9CuB;;AAiD5B,eAAe,IAAIvB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\n// Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(\"http://localhost:8080/basicauth\", {headers : {authorization : basicAuthHeader}})\n    }\n\n    c\n\n    // register successful login and store in session storage\n    registerSuccessfulLogin(username, password) {\n\n        // use username and password from 4200 as 8080 authentication\n        let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors(basicAuthHeader);\n    }\n\n    // handle log out\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    // check if user is logged in\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if (user === null) return false\n        return true\n    }\n\n    // retrieve current user's username\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if (user === null) return ''\n        return user\n    }\n\n    // intercept HTTP requests and include basicAuthHeader\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}
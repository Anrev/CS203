{"ast":null,"code":"import axios from 'axios'; // Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\n\nclass AuthenticationService {\n  // Basic Auth for Spring Security user/pass configured in the application.properties\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(\"http://localhost:8080/authenticate\", {\n      username,\n      password\n    });\n  } // Basic Auth token creation\n\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  } // For Basic Auth\n  // register successful login and store in session storage, append BasicAuthToken to all further requests (since user is authorized)\n\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  } // handle log out\n\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  } // check if user is logged in\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  } // retrieve current user's username\n\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  } // intercept HTTP requests and include basicAuthHeader\n\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeJwtAuthenticationService","username","password","post","createBasicAuthToken","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","basicAuthHeader","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,MAAMC,qBAAN,CAA4B;AAIxB;AACAC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOJ,KAAK,CAACK,IAAN,CAAW,oCAAX,EAAiD;AACpDF,MAAAA,QADoD;AAEpDC,MAAAA;AAFoD,KAAjD,CAAP;AAIH,GAVuB,CAYxB;;;AACAE,EAAAA,oBAAoB,CAACH,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWG,MAAM,CAACC,IAAP,CAAYL,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GAfuB,CAiBxB;AACA;;;AACAK,EAAAA,uBAAuB,CAACN,QAAD,EAAWC,QAAX,EAAqB;AACxCM,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CR,QAA5C;AACA,SAAKS,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BH,QAA1B,EAAoCC,QAApC,CAA5B;AACH,GAtBuB,CAwBxB;;;AACAS,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH,GA3BuB,CA6BxB;;;AACAC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH,GAlCuB,CAoCxB;;;AACAE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH,GAzCuB,CA2CxB;;;AACAJ,EAAAA,sBAAsB,CAACO,eAAD,EAAkB;AACpCnB,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKR,cAAL,EAAJ,EAA2B;AACvBQ,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BN,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AArDuB;;AAwD5B,eAAe,IAAItB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\n// Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\nclass AuthenticationService {\n\n    \n\n    // Basic Auth for Spring Security user/pass configured in the application.properties\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(\"http://localhost:8080/authenticate\", {\n            username,\n            password\n        })\n    }\n\n    // Basic Auth token creation\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password);\n    }\n\n    // For Basic Auth\n    // register successful login and store in session storage, append BasicAuthToken to all further requests (since user is authorized)\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n\n    // handle log out\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    // check if user is logged in\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if (user === null) return false\n        return true\n    }\n\n    // retrieve current user's username\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if (user === null) return ''\n        return user\n    }\n\n    // intercept HTTP requests and include basicAuthHeader\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../../Constants';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'; // Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\n\nclass AuthenticationService {\n  // BELOW CODE IS GENERAL FOR BOTH BASIC AND JWT AUTH\n  // Log Out\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  } // Is User Logged In\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  } // Retrieve Current User Name\n\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  } // BELOW CODE IS SPECIFICALLY FOR JWT AUTH\n\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  } // intercept HTTP requests and include token\n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        console.log(\"test\");\n        config.headers.authorization = token;\n        console.log(config.headers.authorization);\n      }\n\n      console.log(\"test\");\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/anrev/Desktop/CS203 Anrev/frontend/todo-app/src/Components/todo/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","logout","sessionStorage","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","executeJwtAuthenticationService","username","password","post","registerSuccessfulLoginForJwt","token","setItem","setupAxiosInterceptors","createJWTToken","interceptors","request","use","config","console","log","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC,C,CAEP;AACA;;AACA,MAAMC,qBAAN,CAA4B;AAExB;AAEA;AACAC,EAAAA,MAAM,GAAG;AACLC,IAAAA,cAAc,CAACC,UAAf,CAA0BJ,gCAA1B;AACH,GAPuB,CASxB;;;AACAK,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGH,cAAc,CAACI,OAAf,CAAuBP,gCAAvB,CAAX;AACA,QAAIM,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH,GAduB,CAgBxB;;;AACAE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGH,cAAc,CAACI,OAAf,CAAuBP,gCAAvB,CAAX;AACA,QAAIM,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH,GArBuB,CAuBxB;;;AAEAG,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOb,KAAK,CAACc,IAAN,CAAY,GAAEb,OAAQ,eAAtB,EAAsC;AACzCW,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDE,EAAAA,6BAA6B,CAACH,QAAD,EAAWI,KAAX,EAAkB;AAC3CX,IAAAA,cAAc,CAACY,OAAf,CAAuBf,gCAAvB,EAAyDU,QAAzD;AACA,SAAKM,sBAAL,CAA4B,KAAKC,cAAL,CAAoBH,KAApB,CAA5B;AACH;;AAEDG,EAAAA,cAAc,CAACH,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH,GAvCuB,CAyCxB;;;AACAE,EAAAA,sBAAsB,CAACF,KAAD,EAAQ;AAC1BhB,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKhB,cAAL,EAAJ,EAA2B;AACvBiB,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEAF,QAAAA,MAAM,CAACG,OAAP,CAAeC,aAAf,GAA+BX,KAA/B;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAP,CAAeC,aAA3B;AACH;;AACDH,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEA,aAAOF,MAAP;AACH,KAXL;AAaH;;AAxDuB;;AA2D5B,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport { API_URL } from '../../Constants';\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\n// Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\nclass AuthenticationService {\n\n    // BELOW CODE IS GENERAL FOR BOTH BASIC AND JWT AUTH\n\n    // Log Out\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    // Is User Logged In\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        if (user === null) return false\n        return true\n    }\n\n    // Retrieve Current User Name\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        if (user === null) return ''\n        return user\n    }\n    \n    // BELOW CODE IS SPECIFICALLY FOR JWT AUTH\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    // intercept HTTP requests and include token\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    console.log(\"test\")\n\n                    config.headers.authorization = token\n                    console.log(config.headers.authorization)\n                }\n                console.log(\"test\")\n\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}
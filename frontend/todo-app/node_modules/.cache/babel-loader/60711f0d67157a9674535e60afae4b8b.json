{"ast":null,"code":"var _jsxFileName = \"/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/counter/Counter.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Counter.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  constructor() {\n    super(); // Call super before this. No implicit super call in JS.\n\n    this.state = {\n      counter: 0\n    }; // bind increment function to the object\n\n    this.increment = this.increment.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(CounterButton, {\n        by: 1,\n        incrementMethod: this.increment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CounterButton, {\n        by: 5,\n        incrementMethod: this.increment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CounterButton, {\n        by: 10,\n        incrementMethod: this.increment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  } // Function increment\n  // Update state => Counter ++\n  // increment = () => {  using arrow function removes need to do binding. But we will stick to using binding for now\n\n\n  increment() {\n    console.log(\"increment from parent\"); //     this.setState({ // merge current state with new state\n    //         counter: this.state.counter //this.props.by\n    //     });\n    //     // console.log('increment');\n  }\n\n} // Class Counter with functions inside\n\n\nclass CounterButton extends Component {\n  // Define initial state in a constructor\n  // state => counter 0\n  constructor() {\n    super(); // Call super before this. No implicit super call in JS.\n\n    this.state = {\n      counter: 0\n    }; // bind increment function to the object\n\n    this.increment = this.increment.bind(this);\n  } // Function render\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: [\"+\", this.props.by]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"count\",\n        children: this.state.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  } // Function increment\n  // Update state => Counter ++\n  // increment = () => {  using arrow function removes need to do binding. But we will stick to using binding for now\n\n\n  increment() {\n    this.setState({\n      // merge current state with new state\n      counter: this.state.counter + this.props.by\n    }); // console.log('increment'); \n\n    this.props.incrementMethod(this.props.by);\n  }\n\n}\n\nCounterButton.defaultProps = {\n  // default value for properties\n  by: 1\n};\nCounterButton.propTypes = {\n  // type constraints\n  by: PropTypes.number\n};\nexport default Counter;","map":{"version":3,"sources":["/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/counter/Counter.jsx"],"names":["React","Component","PropTypes","Counter","constructor","state","counter","increment","bind","render","console","log","CounterButton","props","by","setState","incrementMethod","defaultProps","propTypes","number"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,eAAP;;;AAGA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAE5BG,EAAAA,WAAW,GAAG;AACV,YADU,CACD;;AACT,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb,CAFU,CAMV;;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AAEH;;AAGDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI,QAAC,aAAD;AAAe,QAAA,EAAE,EAAE,CAAnB;AAAsB,QAAA,eAAe,EAAI,KAAKF;AAA9C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,aAAD;AAAe,QAAA,EAAE,EAAE,CAAnB;AAAsB,QAAA,eAAe,EAAI,KAAKA;AAA9C;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,aAAD;AAAe,QAAA,EAAE,EAAE,EAAnB;AAAuB,QAAA,eAAe,EAAI,KAAKA;AAA/C;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GAtB2B,CAyB5B;AACA;AAEA;;;AAEAA,EAAAA,SAAS,GAAG;AAERG,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAFQ,CAGR;AACA;AACA;AACA;AACH;;AArC2B,C,CAwChC;;;AACA,MAAMC,aAAN,SAA4BX,SAA5B,CAAsC;AAElC;AACA;AACAG,EAAAA,WAAW,GAAG;AACV,YADU,CACD;;AACT,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb,CAFU,CAKV;;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACH,GAXiC,CAalC;;;AACAC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAE,KAAKF,SAAtB;AAAA,wBAAmC,KAAKM,KAAL,CAAWC,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA,kBAAyB,KAAKT,KAAL,CAAWC;AAApC;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GArBiC,CAuBlC;AACA;AAEA;;;AAEAC,EAAAA,SAAS,GAAG;AACR,SAAKQ,QAAL,CAAc;AAAE;AACZT,MAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,GAAqB,KAAKO,KAAL,CAAWC;AAD/B,KAAd,EADQ,CAIR;;AAEA,SAAKD,KAAL,CAAWG,eAAX,CAA2B,KAAKH,KAAL,CAAWC,EAAtC;AACH;;AAnCiC;;AAsCtCF,aAAa,CAACK,YAAd,GAA6B;AAAE;AAC3BH,EAAAA,EAAE,EAAE;AADqB,CAA7B;AAIAF,aAAa,CAACM,SAAd,GAA0B;AAAE;AACxBJ,EAAAA,EAAE,EAAEZ,SAAS,CAACiB;AADQ,CAA1B;AAKA,eAAehB,OAAf","sourcesContent":["\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './Counter.css'\n\n\nclass Counter extends Component {\n\n    constructor() {\n        super(); // Call super before this. No implicit super call in JS.\n        this.state = {\n            counter: 0\n        }\n\n        // bind increment function to the object\n        this.increment = this.increment.bind(this);\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <CounterButton by={1} incrementMethod = {this.increment} />\n                <CounterButton by={5} incrementMethod = {this.increment} />\n                <CounterButton by={10} incrementMethod = {this.increment} />\n            </div>\n        );\n    }\n\n\n    // Function increment\n    // Update state => Counter ++\n\n    // increment = () => {  using arrow function removes need to do binding. But we will stick to using binding for now\n\n    increment() {\n\n        console.log(\"increment from parent\");\n        //     this.setState({ // merge current state with new state\n        //         counter: this.state.counter //this.props.by\n        //     });\n        //     // console.log('increment');\n    }\n}\n\n// Class Counter with functions inside\nclass CounterButton extends Component {\n\n    // Define initial state in a constructor\n    // state => counter 0\n    constructor() {\n        super(); // Call super before this. No implicit super call in JS.\n        this.state = {\n            counter: 0\n        }\n        // bind increment function to the object\n        this.increment = this.increment.bind(this);\n    }\n\n    // Function render\n    render() {\n        return (\n            <div className=\"counter\">\n                <button onClick={this.increment}>+{this.props.by}</button>\n                <span className=\"count\">{this.state.counter}</span>\n            </div>\n        );\n    }\n\n    // Function increment\n    // Update state => Counter ++\n\n    // increment = () => {  using arrow function removes need to do binding. But we will stick to using binding for now\n\n    increment() {\n        this.setState({ // merge current state with new state\n            counter: this.state.counter + this.props.by\n        });\n        // console.log('increment'); \n\n        this.props.incrementMethod(this.props.by);\n    }\n}\n\nCounterButton.defaultProps = { // default value for properties\n    by: 1\n}\n\nCounterButton.propTypes = { // type constraints\n    by: PropTypes.number\n}\n\n\nexport default Counter;"]},"metadata":{},"sourceType":"module"}
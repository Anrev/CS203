{"ast":null,"code":"var _jsxFileName = \"/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/counter/Counter.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Counter.css'; // Counter class (contains CounterButton)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  constructor() {\n    super(); // Call super before this. No implicit super call in JS.\n\n    this.state = {\n      counter: 0\n    }; // bind increment function to the object\n\n    this.increment = this.increment.bind(this);\n  } // incrementMethod - child method\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(CounterButton, {\n        by: 1,\n        incrementMethod: this.increment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CounterButton, {\n        by: 5,\n        incrementMethod: this.increment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CounterButton, {\n        by: 10,\n        incrementMethod: this.increment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"count\",\n        children: this.state.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  } // Function increment (by from child)\n  // increment = () => {  using arrow function removes need to do binding. But we will stick to using binding for now\n\n\n  increment(by) {\n    console.log(`increment from parent - ${by}`); // template literal - embedded expressions inside string literal\n\n    this.setState(prevState => {\n      // referencing previous state\n      return {\n        counter: prevState.counter + by\n      }; // incrementing it, and returning\n    });\n  } // Function decrement (by from child)\n  // increment = () => {  using arrow function removes need to do binding. But we will stick to using binding for now\n\n\n  decrement(by) {\n    console.log(`decrement from parent - ${by}`); // template literal - embedded expressions inside string literal\n\n    this.setState(prevState => {\n      // referencing previous state\n      return {\n        counter: prevState.counter - by\n      }; // incrementing it, and returning\n    });\n  }\n\n} // Defining CounterButton, child of Counter\n\n\nclass CounterButton extends Component {\n  constructor() {\n    super(); // Call super before this. No implicit super call in JS.\n    // bind increment/ function to the object\n\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n  } // Render button with digit of increment\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: [\"+\", this.props.by]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.decrement,\n        children: [\"-\", this.props.by]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  } // Update state => Counter ++\n\n\n  increment() {\n    // Call parent method with by.\n    this.props.incrementMethod(this.props.by);\n  }\n\n  decrement() {\n    // Call parent method with by.\n    this.props.decrementMethod(this.props.by);\n  }\n\n}\n\nCounterButton.defaultProps = {\n  // default value for properties\n  by: 1\n};\nCounterButton.propTypes = {\n  // type constraints - to throw error\n  by: PropTypes.number\n}; // export entire class out\n\nexport default Counter;","map":{"version":3,"sources":["/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/counter/Counter.jsx"],"names":["React","Component","PropTypes","Counter","constructor","state","counter","increment","bind","render","by","console","log","setState","prevState","decrement","CounterButton","props","incrementMethod","decrementMethod","defaultProps","propTypes","number"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './Counter.css'\n\n// Counter class (contains CounterButton)\nclass Counter extends Component {\n\n    constructor() {\n        super(); // Call super before this. No implicit super call in JS.\n        this.state = {\n            counter: 0\n        }\n        // bind increment function to the object\n        this.increment = this.increment.bind(this);\n    }\n\n    // incrementMethod - child method\n    render() {\n        return (\n            <div className=\"App\">\n                <CounterButton by={1} incrementMethod={this.increment} />\n                <CounterButton by={5} incrementMethod={this.increment} />\n                <CounterButton by={10} incrementMethod={this.increment} />\n                <span className=\"count\">{this.state.counter}</span>\n            </div>\n        );\n    }\n\n    // Function increment (by from child)\n    // increment = () => {  using arrow function removes need to do binding. But we will stick to using binding for now\n    increment(by) {\n        console.log(`increment from parent - ${by}`); // template literal - embedded expressions inside string literal\n        this.setState(\n            (prevState) => { // referencing previous state\n            return {counter: prevState.counter + by} // incrementing it, and returning\n            }\n        );\n    }\n\n    // Function decrement (by from child)\n    // increment = () => {  using arrow function removes need to do binding. But we will stick to using binding for now\n    decrement(by) {\n        console.log(`decrement from parent - ${by}`); // template literal - embedded expressions inside string literal\n        this.setState(\n            (prevState) => { // referencing previous state\n            return {counter: prevState.counter - by} // incrementing it, and returning\n            }\n        );\n    }\n}\n\n// Defining CounterButton, child of Counter\nclass CounterButton extends Component {\n\n    constructor() {        \n        super(); // Call super before this. No implicit super call in JS.\n\n        // bind increment/ function to the object\n        this.increment = this.increment.bind(this);\n        this.decrement = this.decrement.bind(this);\n    }\n\n    // Render button with digit of increment\n    render() {\n        return (\n            <div className=\"counter\">\n                <button onClick={this.increment}>+{this.props.by}</button>\n                <button onClick={this.decrement}>-{this.props.by}</button>\n            </div>\n        );\n    }\n\n    // Update state => Counter ++\n    increment() {\n        // Call parent method with by.\n        this.props.incrementMethod(this.props.by);\n    }\n\n    decrement() {\n        // Call parent method with by.\n        this.props.decrementMethod(this.props.by);\n    }\n}\n\nCounterButton.defaultProps = { // default value for properties\n    by: 1\n}\n\nCounterButton.propTypes = { // type constraints - to throw error\n    by: PropTypes.number\n}\n\n// export entire class out\nexport default Counter;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/todo/TodoComponent.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService.js';\nimport AuthenticationService from './AuthenticationService.js'; // Page to update or add a specific todo\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoComponent extends Component {\n  constructor(props) {\n    super(props); // State of the page - contains id, desc, and date for a specific todo.\n\n    this.state = {\n      id: this.props.match.params.id,\n      description: '',\n      targetDate: moment(new Date()).format('YYYY-MM-DD')\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  } // on load of page\n\n\n  componentDidMount() {\n    ci; // if -1 (create), do not try to load todo as it is empty\n\n    if (this.state.id === -1) {\n      console.log(\"TEst\");\n      return;\n    }\n\n    let username = AuthenticationService.getLoggedInUserName;\n    TodoDataService.retrieveTodo(username, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n    }));\n  } // on Formik Submit\n\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUserName;\n    let todo = {\n      id: this.state.id,\n      description: values.description,\n      targetDate: values.targetDate\n    }; // if -1 (create), do createTodo\n\n    if (this.state.id === -1) {\n      TodoDataService.createTodo(username, todo).then(() => this.props.history.push(\"/todos\"));\n    } // else update, do updateTodo\n\n\n    TodoDataService.updateTodo(username, this.state.id, todo).then(() => this.props.history.push(\"/todos\"));\n  } // on Formik Validate call\n  // if errors populated, will not call onSubmit above\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters for description\";\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid target Date\";\n    }\n\n    return errors;\n  }\n\n  render() {\n    // rely on modern JS destructuring, can assign/retrieve together\n    let {\n      description,\n      targetDate\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            description,\n            targetDate\n          },\n          onSubmit: this.onSubmit,\n          validateOnChange: false,\n          validateOnBlur: false,\n          validate: this.validate,\n          enableReinitialize: true,\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"targetDate\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"text\",\n                name: \"description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Target Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"date\",\n                name: \"targetDate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TodoComponent;","map":{"version":3,"sources":["/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/todo/TodoComponent.jsx"],"names":["React","Component","moment","Form","Formik","Field","ErrorMessage","TodoDataService","AuthenticationService","TodoComponent","constructor","props","state","id","match","params","description","targetDate","Date","format","onSubmit","bind","validate","componentDidMount","ci","console","log","username","getLoggedInUserName","retrieveTodo","then","response","setState","data","values","todo","createTodo","history","push","updateTodo","errors","length","isValid","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Form, Formik, Field, ErrorMessage } from 'formik'\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\n// Page to update or add a specific todo\nclass TodoComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        // State of the page - contains id, desc, and date for a specific todo.\n        this.state = {\n            id: this.props.match.params.id,\n            description: '',\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n        }\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n\n    }\n\n    // on load of page\n    componentDidMount() {\n\n        ci\n\n        // if -1 (create), do not try to load todo as it is empty\n        if (this.state.id === -1) {\n            console.log(\"TEst\")\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUserName\n\n        TodoDataService.retrieveTodo(username, this.state.id)\n            .then(\n                response => this.setState({\n                    description: response.data.description,\n                    targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n                })\n            )\n    }\n\n    // on Formik Submit\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        // if -1 (create), do createTodo\n        if (this.state.id === -1) {\n            TodoDataService.createTodo(username, todo)\n                .then(() => this.props.history.push(\"/todos\"))\n        }\n\n        // else update, do updateTodo\n        TodoDataService.updateTodo(username, this.state.id, todo)\n            .then(() => this.props.history.push(\"/todos\"))\n    }\n\n    // on Formik Validate call\n    // if errors populated, will not call onSubmit above\n    validate(values) {\n        let errors = {}\n\n        if (!values.description) {\n            errors.description = \"Enter a description\"\n        } else if (values.description.length < 5) {\n            errors.description = \"Enter at least 5 characters for description\"\n        }\n\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = \"Enter a valid target Date\"\n        }\n\n        return errors\n    }\n\n    render() {\n        // rely on modern JS destructuring, can assign/retrieve together\n        let { description, targetDate } = this.state\n\n        return (\n            <div>\n                <h1>Todo</h1>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{ description, targetDate }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning\"></ErrorMessage>\n                                    <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\"></ErrorMessage>\n                                    <fieldset className=\"form-group\">\n                                        <label>Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\"></Field>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Target Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\"></Field>\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TodoComponent;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'; // Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\n\nclass AuthenticationService {\n  // BELOW CODE IS GENERAL FOR BOTH BASIC AND JWT AUTH\n  // Log Out\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  } // Is User Logged In\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  } // Retrieve Current User Name\n\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  } // BELOW CODE IS SPECIFICALLY FOR JWT AUTH\n\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_UR}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  } // BELOW CODE IS SPECIFICALLY FOR BASIC AUTH\n  // Basic Auth for Spring Security user/pass configured in the application.properties\n\n\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(\"http://localhost:8080/basicauth\", {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  } // Basic Auth token creation\n\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  } // register successful login and store in session storage, append BasicAuthToken to all further requests (since user is authorized)\n\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  } // intercept HTTP requests and include basicAuthHeader\n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/todo/AuthenticationService.js"],"names":["axios","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","logout","sessionStorage","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","executeJwtAuthenticationService","username","password","post","API_UR","registerSuccessfulLoginForJwt","token","setItem","setupAxiosInterceptors","createJWTToken","executeBasicAuthenticationService","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLogin","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC,C,CAEP;AACA;;AACA,MAAMC,qBAAN,CAA4B;AAExB;AAEA;AACAC,EAAAA,MAAM,GAAG;AACLC,IAAAA,cAAc,CAACC,UAAf,CAA0BJ,gCAA1B;AACH,GAPuB,CASxB;;;AACAK,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGH,cAAc,CAACI,OAAf,CAAuBP,gCAAvB,CAAX;AACA,QAAIM,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH,GAduB,CAgBxB;;;AACAE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGH,cAAc,CAACI,OAAf,CAAuBP,gCAAvB,CAAX;AACA,QAAIM,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH,GArBuB,CAyBxB;;;AAEAG,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOZ,KAAK,CAACa,IAAN,CAAY,GAAEC,MAAO,eAArB,EAAqC;AACxCH,MAAAA,QADwC;AAExCC,MAAAA;AAFwC,KAArC,CAAP;AAIH;;AAEDG,EAAAA,6BAA6B,CAACJ,QAAD,EAAWK,KAAX,EAAkB;AAC3CZ,IAAAA,cAAc,CAACa,OAAf,CAAuBhB,gCAAvB,EAAyDU,QAAzD;AACA,SAAKO,sBAAL,CAA4B,KAAKC,cAAL,CAAoBH,KAApB,CAA5B;AACH;;AAEDG,EAAAA,cAAc,CAACH,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH,GAzCuB,CA6CxB;AAEA;;;AACAI,EAAAA,iCAAiC,CAACT,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOZ,KAAK,CAACqB,GAAN,CAAU,iCAAV,EACH;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0Bb,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH,GAnDuB,CAqDxB;;;AACAY,EAAAA,oBAAoB,CAACb,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWa,MAAM,CAACC,IAAP,CAAYf,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GAxDuB,CA0DxB;;;AACAe,EAAAA,uBAAuB,CAAChB,QAAD,EAAWC,QAAX,EAAqB;AACxCR,IAAAA,cAAc,CAACa,OAAf,CAAuBhB,gCAAvB,EAAyDU,QAAzD;AACA,SAAKO,sBAAL,CAA4B,KAAKM,oBAAL,CAA0Bb,QAA1B,EAAoCC,QAApC,CAA5B;AACH,GA9DuB,CAgExB;;;AACAM,EAAAA,sBAAsB,CAACF,KAAD,EAAQ;AAC1BhB,IAAAA,KAAK,CAAC4B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKzB,cAAL,EAAJ,EAA2B;AACvByB,QAAAA,MAAM,CAACT,OAAP,CAAeC,aAAf,GAA+BP,KAA/B;AACH;;AACD,aAAOe,MAAP;AACH,KANL;AAQH;;AA1EuB;;AA6E5B,eAAe,IAAI7B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\n// Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\nclass AuthenticationService {\n\n    // BELOW CODE IS GENERAL FOR BOTH BASIC AND JWT AUTH\n\n    // Log Out\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    // Is User Logged In\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        if (user === null) return false\n        return true\n    }\n\n    // Retrieve Current User Name\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        if (user === null) return ''\n        return user\n    }\n\n\n    \n    // BELOW CODE IS SPECIFICALLY FOR JWT AUTH\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_UR}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n\n    // BELOW CODE IS SPECIFICALLY FOR BASIC AUTH\n\n    // Basic Auth for Spring Security user/pass configured in the application.properties\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(\"http://localhost:8080/basicauth\",\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    // Basic Auth token creation\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password);\n    }\n\n    // register successful login and store in session storage, append BasicAuthToken to all further requests (since user is authorized)\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n\n    // intercept HTTP requests and include basicAuthHeader\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios'; // Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\n\nclass AuthenticationService {\n  // BELOW CODE IS GENERAL FOR BOTH BASIC AND JWT AUTH\n  // Log Out\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  } // Is User Logged In\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  } // Retrieve Current User Name\n\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(\"http://localhost:8080/authenticate\", {\n      username,\n      password\n    });\n  } // BELOW CODE IS FOR  BASIC AUTH\n  // Basic Auth for Spring Security user/pass configured in the application.properties\n\n\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(\"http://localhost:8080/basicauth\", {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  } // Basic Auth token creation\n\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  } // register successful login and store in session storage, append BasicAuthToken to all further requests (since user is authorized)\n\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  } // intercept HTTP requests and include basicAuthHeader\n\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","logout","sessionStorage","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","executeJwtAuthenticationService","username","password","post","executeBasicAuthenticationService","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLogin","setItem","setupAxiosInterceptors","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,MAAMC,qBAAN,CAA4B;AAE5B;AAEA;AACAC,EAAAA,MAAM,GAAG;AACLC,IAAAA,cAAc,CAACC,UAAf,CAA0B,mBAA1B;AACH,GAP2B,CAS5B;;;AACAC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGH,cAAc,CAACI,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH,GAd2B,CAgB5B;;;AACAE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGH,cAAc,CAACI,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAGDG,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOX,KAAK,CAACY,IAAN,CAAW,oCAAX,EAAiD;AACpDF,MAAAA,QADoD;AAEpDC,MAAAA;AAFoD,KAAjD,CAAP;AAIH,GA7B2B,CAmC5B;AAEI;;;AACAE,EAAAA,iCAAiC,CAACH,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOX,KAAK,CAACc,GAAN,CAAU,iCAAV,EACH;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BP,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH,GAzCuB,CA4CxB;;;AACAM,EAAAA,oBAAoB,CAACP,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWO,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GA/CuB,CAiDxB;;;AACAS,EAAAA,uBAAuB,CAACV,QAAD,EAAWC,QAAX,EAAqB;AACxCR,IAAAA,cAAc,CAACkB,OAAf,CAAuB,mBAAvB,EAA4CX,QAA5C;AACA,SAAKY,sBAAL,CAA4B,KAAKL,oBAAL,CAA0BP,QAA1B,EAAoCC,QAApC,CAA5B;AACH,GArDuB,CAyDxB;;;AACAW,EAAAA,sBAAsB,CAACC,eAAD,EAAkB;AACpCvB,IAAAA,KAAK,CAACwB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKtB,cAAL,EAAJ,EAA2B;AACvBsB,QAAAA,MAAM,CAACZ,OAAP,CAAeC,aAAf,GAA+BO,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AAnEuB;;AAsE5B,eAAe,IAAI1B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\n// Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\nclass AuthenticationService {\n\n// BELOW CODE IS GENERAL FOR BOTH BASIC AND JWT AUTH\n\n// Log Out\nlogout() {\n    sessionStorage.removeItem('authenticatedUser');\n}\n\n// Is User Logged In\nisUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false\n    return true\n}\n\n// Retrieve Current User Name\ngetLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return ''\n    return user\n}\n\n\nexecuteJwtAuthenticationService(username, password) {\n    return axios.post(\"http://localhost:8080/authenticate\", {\n        username,\n        password\n    })\n}\n\n\n\n\n\n// BELOW CODE IS FOR  BASIC AUTH\n\n    // Basic Auth for Spring Security user/pass configured in the application.properties\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(\"http://localhost:8080/basicauth\",\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n\n    // Basic Auth token creation\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password);\n    }\n\n    // register successful login and store in session storage, append BasicAuthToken to all further requests (since user is authorized)\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n\n    \n\n    // intercept HTTP requests and include basicAuthHeader\n    setupAxiosInterceptors(basicAuthHeader) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = basicAuthHeader\n                }\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios'; // Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\n\nclass AuthenticationService {\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    // REST 8080 username and password\n    let username = 'user';\n    let password = 'password'; // Use username and password and encode into base64 to generate \"basic\" AuthHeader.\n\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    axios.interceptors.request.use(config => {\n      i;\n      config.headers.authorization = basicAuthHeader;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfulLogin","username","password","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","setupAxiosInterceptors","basicAuthHeader","window","btoa","interceptors","request","use","config","i","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxCC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CH,QAA5C;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACLF,IAAAA,cAAc,CAACG,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,EAAP;AAClB,WAAOA,IAAP;AACH;;AAEDG,EAAAA,sBAAsB,GAAG;AAErB;AACA,QAAIV,QAAQ,GAAG,MAAf;AACA,QAAIC,QAAQ,GAAG,UAAf,CAJqB,CAKrB;;AACA,QAAIU,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYb,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAJ,IAAAA,KAAK,CAACiB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACRC,MAAAA,CAAC;AACDD,MAAAA,MAAM,CAACE,OAAP,CAAeC,aAAf,GAA+BT,eAA/B;AACH,KAJL;AAMH;;AAnCuB;;AAsC5B,eAAe,IAAIb,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\n// Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in username\nclass AuthenticationService {\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser');\n        if(user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors() {\n\n        // REST 8080 username and password\n        let username = 'user'\n        let password = 'password'\n        // Use username and password and encode into base64 to generate \"basic\" AuthHeader.\n        let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n\n        axios.interceptors.request.use(\n            (config) => {\n                i\n                config.headers.authorization = basicAuthHeader\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}
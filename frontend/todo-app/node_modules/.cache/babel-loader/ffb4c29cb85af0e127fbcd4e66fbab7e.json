{"ast":null,"code":"var _jsxFileName = \"/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/counter/Counter.jsx\";\nimport React, { Component } from 'react';\nimport './Counter.css'; // Class Counter with functions inside\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  // Define initial state in a constructor\n  // state => counter 0\n  constructor() {\n    super(); // Call super before this. No implicit super call in JS.\n\n    this.state = {\n      counter: 0\n    }; // bind increment function to the object\n\n    this.increment = this.increment.bind(this);\n  } // Function render\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \"+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"count\",\n        children: this.state.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  } // Function increment\n  // Update state => Counter ++\n  // increment = () => {  using arrow function removes need to do binding. But we will stick to using bindingfo\n\n\n  increment() {\n    this.setState({\n      counter: this.state.counter + 1\n    }); // console.log('increment');\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/anrev/Desktop/School/T3/Collaborative Development/Udemy Course/To-Do Application/frontend/todo-app/src/Components/counter/Counter.jsx"],"names":["React","Component","Counter","constructor","state","counter","increment","bind","render","setState"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP,C,CAEA;;;;AACA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAE5B;AACA;AACAE,EAAAA,WAAW,GAAG;AACV,YADU,CACD;;AACT,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb,CAFU,CAKV;;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACH,GAX2B,CAa5B;;;AACAC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAE,KAAKF,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA,kBAAyB,KAAKF,KAAL,CAAWC;AAApC;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GArB2B,CAuB5B;AACA;AAEA;;;AAEAC,EAAAA,SAAS,GAAG;AACR,SAAKG,QAAL,CAAc;AACVJ,MAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,GAAqB;AADpB,KAAd,EADQ,CAIR;AACH;;AAjC2B;;AAsChC,eAAeH,OAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport './Counter.css'\n\n// Class Counter with functions inside\nclass Counter extends Component {\n\n    // Define initial state in a constructor\n    // state => counter 0\n    constructor() {\n        super(); // Call super before this. No implicit super call in JS.\n        this.state = {\n            counter: 0\n        }\n        // bind increment function to the object\n        this.increment = this.increment.bind(this);\n    }\n\n    // Function render\n    render() {\n        return (\n            <div className=\"counter\">\n                <button onClick={this.increment}>+1</button>\n                <span className=\"count\">{this.state.counter}</span>\n            </div>\n        );\n    }\n\n    // Function increment\n    // Update state => Counter ++\n\n    // increment = () => {  using arrow function removes need to do binding. But we will stick to using bindingfo\n\n    increment() {\n        this.setState({\n            counter: this.state.counter + 1\n        });\n        // console.log('increment');\n    }\n}\n\n\n\nexport default Counter;"]},"metadata":{},"sourceType":"module"}